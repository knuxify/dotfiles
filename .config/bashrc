#!/bin/bash
#-------------------------------#
#      knuxify's bashrc         #
#      rev. B                   #
#-------------------------------#

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

export GPG_TTY=$(tty)

alias grep='grep --colour=auto'
alias rb="source ~/.bashrc"
alias ls="ls -sh --color"
alias als="ls -shA --color"

alias iwdplz="sudo service iwd restart"

# Add local bin folder to path.
export PATH=$PATH:~/.bin:~/.local/bin

xhost +local:root > /dev/null 2>&1
complete -cf sudo
shopt -s checkwinsize; shopt -s expand_aliases; shopt -s histappend

# Some useful variables
export EDITOR=nano

alias tilde="mosh -ssh 'ssh -i ~/.ssh/tilde.town' knuxify@tilde.town"

export PS1="\[\e[1;37m\]\`parse_git_branch\`\[\e[0m\]\W \[\e[1;33m\]>>\[\e[0m\] "

alias "pushf=git push -f"
alias at=apktoys

alias sudo=doas
export SUDO=doas

_sort_for_filetype() {
    # $1: directory
    # $2: filetype
    # $3: target

    directory=$1
    filetype=$2
    target=$3

    [ ! -e "$target" ] && mkdir -p "$target"

    for file in "$directory/"*.$filetype; do
        filename=$(basename "$file")
        if [ ! -e "$target/$filename" ]; then
            mv "$file" "$target"
        else
            echo "Conflict: $filename exists in $target"
        fi
    done
}

sortfiles() {
    # Sorts out most files into specific directories.
    # Usage: sortfiles [directory]
    # If directory is not provided, assumes $PWD

    if [ $1 ]; then
        directory=$*
    else
        directory=$PWD
    fi

    if [ ! -d $directory ]; then
        echo "Not a directory: $directory"
        return 1
    fi

    for filetype in 'png' 'jpg' 'webp' 'gif' 'jpeg'; do
        _sort_for_filetype "$directory" "$filetype" ~/Pictures
    done

    for filetype in 'mp4' 'webm' 'mov' 'avi' 'mkv'; do
        _sort_for_filetype "$directory" "$filetype" ~/Videos
    done

    for filetype in 'mp3' 'ogg' 'wav'; do
        _sort_for_filetype "$directory" "$filetype" ~/Music/unsorted
    done

    for filetype in 'docx' 'pdf' 'odt' 'ppt' 'doc'; do
        _sort_for_filetype "$directory" "$filetype" ~/Documents
    done
}

# proj - create a project or cd into one
# usage: proj [project name or git link]
proj() {
    [[ ! -e "$HOME/projects" ]] && mkdir "$HOME/projects"
    if [ -e "$HOME/projects/$*" ]; then
        cd "$HOME/projects/$*"
    else
        projectnolink="${*/.git/}"; projectnolink="${projectnolink##*/}"
        read -p "$projectnolink does not exist. Press any button to create." -ren1
        if [[ "$*" = "https://github.com"* ]] || [[ "$*" = "https://gitlab.com"* ]] || [[ "$*" = *".git" ]]; then
            cd $HOME/projects; git clone $*; cd "$projectnolink"
        else
            cd $HOME/projects; mkdir $*; cd $*
        fi
    fi
}

sng() {
    sngtmp="$PWD"
    mkdir -p /tmp/sng
    cd /tmp/sng
    yt-dlp -x --audio-format=mp3 --add-metadata --embed-thumbnail "$*"
    cp * "$sngtmp"
    cd "$sngtmp"
    rm -rf /tmp/sng
    unset sngtmp
}

# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        echo "[${BRANCH}] "
    else
        echo ""
    fi
}

newbranch() {
    if [[ $2 ]]; then
        git pull origin $1
        git checkout $1 && \
        git checkout -b $2
    else
        git pull origin
        git checkout origin && \
        git checkout -b $1
    fi
}

readyforpatch() {
    git init
    git add .
    git commit -m "base" >/dev/null
}

makepatch() {
    git add .
    git commit -m "$*"
    patch=$(git format-patch -1)
    mv $patch ../..
}

pushbranch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    upstream=knuxify
    [ $1 ] && upstream=$1
    git push --set-upstream $upstream $BRANCH
}

nano() {
	case $PWD in
		*aspinwall*|*lapel*) /usr/bin/nano $*; return;;
	esac

	local stop_parsing_args='false'
	local args=''
	local files=''
	for arg in $*; do
		case $arg in
			--) stop_parsing_args='true';;
			-*) [ $stop_parsing_args != 'true' ] && args="$args $arg";;
			*) files="$files $arg";;
		esac
	done

	for file in $files; do
		case $file in
			*.py) unexpand --tabs=4 "$file" > "$file.tmp";;
			*.ui|*.yaml|*.yml) unexpand --tabs=2 "$file" > "$file.tmp";;
		esac
		[ -e "$file.tmp" ] && mv "$file.tmp" "$file"
	done

	/usr/bin/nano $args -- $files

	for file in $files; do
		case $file in
			*.py) expand --tabs=4 "$file" > "$file.tmp";;
			*.ui|*.yaml|*.yml) expand --tabs=2 "$file" > "$file.tmp";;
		esac
		[ -e "$file.tmp" ] && mv "$file.tmp" "$file"
	done
}

fw() {
ssh -p420 -t -R $1:localhost:$1 dithernet.org -l knuxify "cd /home/knuxify/proxy; tcpproxy -lhost 0.0.0.0:$1 -rhost localhost:$1"
}
