#!/bin/bash
#-------------------------------#
#	   knuxify's bashrc			#
#	   rev. B					#
#-------------------------------#

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

export GPG_TTY=$(tty)

alias grep='grep --colour=auto'
alias rb="source ~/.bashrc"
alias ls="ls -sh --color"
alias als="ls -shA --color"

alias iwdplz="sudo service iwd restart"

_sort_for_filetype() {
	# $1: directory
	# $2: filetype
	# $3: target

	directory=$1
	filetype=$2
	target=$3

	[ ! -e "$target" ] && mkdir -p "$target"

	for file in "$directory/"*.$filetype; do
		filename=$(basename "$file")
		if [ ! -e "$target/$filename" ]; then
			mv "$file" "$target"
		else
			echo "Conflict: $filename exists in $target"
		fi
	done
}

sortfiles() {
	# Sorts out most files into specific directories.
	# Usage: sortfiles [directory]
	# If directory is not provided, assumes $PWD

	if [ $1 ]; then
		directory=$*
	else
		directory=$PWD
	fi

	if [ ! -d $directory ]; then
		echo "Not a directory: $directory"
		return 1
	fi

	for filetype in 'png' 'jpg' 'webp' 'gif' 'jpeg'; do
		_sort_for_filetype "$directory" "$filetype" ~/Pictures
	done

	for filetype in 'mp4' 'webm' 'mov' 'avi' 'mkv'; do
		_sort_for_filetype "$directory" "$filetype" ~/Videos
	done

	for filetype in 'mp3' 'ogg' 'wav'; do
		_sort_for_filetype "$directory" "$filetype" ~/Music/unsorted
	done

	for filetype in 'docx' 'pdf' 'odt' 'ppt' 'doc'; do
		_sort_for_filetype "$directory" "$filetype" ~/Documents
	done
}

[[ -e ~/.gittoken ]] && source ~/.gittoken

# Add local bin folder to path.
export PATH=$PATH:~/.bin:~/.local/bin:/home/knuxify/.cargo/bin

xhost +local:root > /dev/null 2>&1
complete -cf sudo
shopt -s checkwinsize; shopt -s expand_aliases; shopt -s histappend

# Some useful variables
export EDITOR=nano

masochist-mode() {
	# masochist-mode - set up cm building environment
	echo -e "\e[1;31mYou promised to not do that anymore.\e[0m Don't let me down."
	#return 1
	[[ "$1" ]] || {
		echo "no directory specified!"
		return 1
	}
	echo "Are you sure you want to waste the next ~24 hours? [Y/n] Y"
	cd ~/lineage/"$1"
	source ~/lineage/android/venv/bin/activate
	source build/envsetup.sh
	export JAVA_HOME=/usr/lib/jvm/java-7-openjdk
	echo -e "\e[1;31mMASOCHIST MODE\e[0m enabled."
}

# proj - create a project or cd into one
# usage: proj [project name or git link]
proj() {
	[[ ! -e "$HOME/projects" ]] && mkdir "$HOME/projects"
	if [ -e "$HOME/projects/$*" ]; then
		cd "$HOME/projects/$*"
	else
		projectnolink="${*/.git/}"; projectnolink="${projectnolink##*/}"
		read -p "$projectnolink does not exist. Press any button to create." -ren1
		cd $HOME/projects
		if [[ "$*" = "https://github.com"* ]] || [[ "$*" = "https://gitlab.com"* ]] || [[ "$*" = *".git" ]]; then
			git clone $*
		else
			mkdir $*
		fi
		cd "$projectnolink"
	fi
}

# clone - same as clone but for peeking at source code
# usage: clone [project name or git link]
clone() {
	[[ ! -e "$HOME/clones" ]] && mkdir "$HOME/clones"
	if [ -e "$HOME/clones/$*" ]; then
		cd "$HOME/clones/$*"
	else
		projectnolink="${*/.git/}"; projectnolink="${projectnolink##*/}"
		read -p "$projectnolink does not exist. Press any button to create." -ren1
		cd $HOME/clones
		git clone $*
		cd "$projectnolink"
	fi
}

# today-i - daily activity logger
# usage: today-i
today-i() {
	date=$(date +%Y-%m-%d)
	[[ ! -e $diary_dir ]] && mkdir $diary_dir
	date +%H:%M >> $diary_dir/$date
	if [[ $* ]]; then
		echo "$*" >> $diary_dir/$date
	else
		nano $diary_dir/$date
	fi
}
yesterday-i() {
	[[ ! -e $diary_dir ]] && mkdir $diary_dir
	date --date="yesterday" +%H:%M >> $diary_dir/$(date --date="yesterday" +%Y-%m-%d)
	nano $diary_dir/$(date --date="yesterday" +%Y-%m-%d)
	#echo "$*" >> $diary_dir/$(date --date="yesterday" +%Y-%m-%d)
}

alias tilde="mosh -ssh 'ssh -i ~/.ssh/tilde.town' knuxify@tilde.town"

hack() {
	unset huser
	[[ $2 ]] && huser="$2""@"
	case $1 in
		hc1|susie|104) ssh ${huser}192.168.1.104;;
		satellite|mc|lancer|114) ssh ${huser}192.168.1.111;;
		pi|muffet) ssh ${huser}192.168.1.103;;
		tunnel) ssh -p 420 ${huser}user2.polaron.srv.jortage.com;;
	esac
}

alias touchtoggle="xinput set-prop 'AlpsPS/2 ALPS GlidePoint' 315 $1"

PS1="\W \[\e[0m\]> \[$(tput sgr0)\]"

sng() {
	sngtmp="$PWD"
	mkdir -p /tmp/sng
	cd /tmp/sng
	yt-dlp -x --add-metadata --embed-thumbnail "$*"
	cp * "$sngtmp"
	cd "$sngtmp"
	rm -rf /tmp/sng
	unset sngtmp
}

alias "pesky=sudo rc-service postgresql start"

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		echo "[${BRANCH}] "
	else
		echo ""
	fi
}

export PS1="\[\e[1;37m\]\`parse_git_branch\`\[\e[0m\]\W \[\e[1;33m\]>>\[\e[0m\] "

newbranch() {
	if [[ $2 ]]; then
		git checkout origin/$1 || return 1
		git pull origin $1 || return 1
		git checkout $1 || return 1
		git pull origin $1 || return 1
		git checkout -b $2 || return 1
	else
		git pull origin
		git checkout origin || return 1
		git checkout -b $1
	fi
}

readyforpatch() {
	git init
	git add .
	git commit -m "base" >/dev/null
}

makepatch() {
	git add .
	git commit -m "$*"
	patch=$(git format-patch -1)
	mv $patch ../..
}

govern() {
	if [ ! $1 ]; then echo "powersave or performance"; return 1; fi
	echo $1 | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
}

pushbranch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [[ $1 ]]; then upstream=$1; else upstream=knuxify; fi
	git push --set-upstream $upstream $BRANCH -f
}

#__NAT_TABCOUNT=''

#nat() {
#	#if [[ $PWD == *'aspinwall'* ]]; then /usr/bin/nano $*; return; fi
#	has_doubleminus='false'
#	files=''
#	flags=''
#	for file in $@; do
#		if [[ $file == '--' ]]; then has_doubleminus='true'; continue; fi
#		if [[ $file == '-'* ]] && [ $has_doubleminus = 'false' ]; then
#			flags="$flags $file"
#			continue
#		fi
#		files="$files $file"
#		unexpand --tabs=$__NAT_TABCOUNT --first-only "$file" > "$file.tmp"
#		mv "$file.tmp" "$file"
#	done
#
#	/usr/bin/nano -T$__NAT_TABCOUNT $flags -- $files
#
#	for file in $files; do
#		expand --tabs=$__NAT_TABCOUNT --initial "$file" > "$file.tmp"
#		mv "$file.tmp" "$file"
#	done
#}

#nano_discern() {
#	case $1 in
#		*.py) __NAT_TABCOUNT=4; nat "$@";;
#		*.ui|*.vala|*.yml|*.yaml|*.xml|*.xml.in) __NAT_TABCOUNT=2; nat "$@";;
#		*.c|*.h) nano -T8 -J80 "$@";;
#		*) /usr/bin/nano "$@";;
#	esac
#}

abuild_in_chroot() {
	# simple alias that abuses pmbootstrap to build alpine pkgs in a chroot
	if [[ "$1" == '--arch='* ]]; then
		arch="$1"
	else
		arch=''
	fi
	pkgname="$(basename $(pwd))"
	if ! [ -e ~/.local/var/pmbootstrap/cache_git/pmaports/cc ]; then
		mkdir -p ~/.local/var/pmbootstrap/cache_git/pmaports/cc
	fi
	if [ -e ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname" ]; then
		rm -r ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname"
	fi
	cp -r ../"$pkgname" ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname"
	# the presence of the src dir confuses pmbootstrap so delete it if it's present
	if [ -e ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname"/src ]; then
		rm -r ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname"/src
	fi
	if [[ $arch ]]; then
		pmbootstrap --details-to-stdout build --force $1 "$pkgname" || return $?
	else
		pmbootstrap --details-to-stdout build --force "$pkgname" || return $?
	fi
	if [ $1 != '--noremove' ]; then
		rm -r ~/.local/var/pmbootstrap/cache_git/pmaports/cc/"$pkgname"
	fi
}

alias nano=~/.bin/nano_discern
alias "pushf=git push -f"
alias at=apktoys

alias sudo=doas
export SUDO=doas

alias "apkunlock=doas rm -f /lib/apk/db/lock"
